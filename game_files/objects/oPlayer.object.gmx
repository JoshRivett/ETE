<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayerDefault</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initial Variable Values
imgsp = 7 / room_speed;
grav = 30 / room_speed;
hp = 3;
hsp = 0;
vsp = 0;
dir = 0;
jumpsp = 420 / room_speed;
jumpcd = 0.2 * room_speed;
jumpReady = true;
timeSinceJump = 0;
movesp = 120 / room_speed;
bulletSp = 480 / room_speed;
shotReady = true;
shotcd = 0.3 * room_speed;
timeSinceShot = 0;
grounded = true;
kicked = false;

//Built in Variables
image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Exits the script if paused
if global.paused = true {
    image_speed = 0;
    exit;
}

//Player Inputs
if global.controlType = "keyboard" {
    keyLeft = -keyboard_check(vk_left);
    keyRight = keyboard_check(vk_right);
    keyUp = keyboard_check(vk_up);
    keyDown = keyboard_check(vk_down);
    keyJump = keyboard_check(ord('Z'));
    keyShoot = keyboard_check(ord('X'));
} else if global.controlType = "controller" {
    keyLeft = /*-gamepad_button_check(0, gp_padl) +*/ -gamepad_button_check(0, gp_axislh);
    keyRight = /*gamepad_button_check(0, gp_padr) +*/ gamepad_button_check(0, gp_axislh);
    keyUp = gamepad_button_check(0, gp_padu);
    keyDown = gamepad_button_check(0, gp_padd);
    keyJump = gamepad_button_check(0, gp_face1);
    keyShoot = gamepad_button_check(0, gp_face3);
}

//Input Reactions
move = keyLeft + keyRight;
if kicked = false {
    hsp = move * movesp;
}

vsp += grav;

if keyRight {
    dir = 0;
    image_speed = imgsp;
    sprite_index = sPlayerR;
    
}
if -keyLeft {
    dir = 180;
    image_speed = imgsp;
    sprite_index = sPlayerL;
}
if move = 0 {
    image_speed = 0;
    sprite_index = sPlayerDefault;
    
    if dir = 0 {
        image_index = 0;
    } else if dir = 180 {
        image_index = 1;
    }
}

if keyJump and jumpReady = true {
    if place_meeting(x, y + 1, oWall) {
        audio_play_sound(snJump, 0, false)
        
        vsp = -jumpsp;
        grounded = false;
        jumpReady = false;
    }
}

//Shooting
if shotReady = true {
    if keyShoot {
        audio_play_sound(snBullet, 0, false);
        
        if sprite_index = sPlayerDefault {
            bulletOffsetY = 5;
        } else {
            bulletOffsetY = 3;
        }
        
        if dir = 0 {
            bullet = instance_create(x + 7, y - bulletOffsetY, oBullet);
            //hsp -= 6;
        } else if dir = 180 {
            bullet = instance_create(x - 7, y - bulletOffsetY, oBullet);
            //hsp += 6;
        }
        
        bullet.sp = bulletSp;
        bullet.direction = dir; //+ random_range(-3, 3);
        
        /* if keyUp {
            bullet.direction = 90;
        }
        if keyDown {
            bullet.direction = 270;
        } */
        bullet.image_angle = bullet.direction;
        
        shotReady = false;
    }
}

//Horizontal Collision
if place_meeting(x + hsp, y, oWall) {
    while not(place_meeting(x + sign(hsp), y, oWall)) {
        x += sign(hsp);
    }
    hsp = 0;
    
    if oPlayer.kicked = true {
        hp -=1;
        audio_play_sound(snPlayerHit, 0, false);
    }
    kicked = false;
}
x += hsp;

//Vertical Collision
if place_meeting(x, y + vsp, oWall) {
    while not(place_meeting(x, y + sign(vsp), oWall)) {
        y += sign(vsp);
    }
    grounded = true;
    vsp = 0;
} else if not(place_meeting(x, y + sign(vsp), oWall)) {
    sprite_index = sPlayerDefault;
    if dir = 0 {
        image_index = 2;
    } else if dir = 180 {
        image_index = 3;
    }
}
y += vsp;

//Hitpoints and Death
if hp &lt;= 0 or y &gt; room_height {
    oControl.roomRestart = true;
    instance_destroy();
}

//Pixel Grid
x = round(x);
y = round(y);

//Debug Code
screenWrap();

/*
if keyboard_check_pressed(vk_delete) {
    hp -= 1;
}
*/

//Alarms
if shotReady = false {
    timeSinceShot += 1;
}

if jumpReady = false {
    timeSinceJump += 1;
}

//Shot Cooldown Alarm
if timeSinceShot &gt;= shotcd {
    shotReady = true;
    timeSinceShot = 0;
}

if timeSinceJump &gt;= jumpcd {
    jumpReady = true;
    timeSinceJump = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oProjectile">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp -= 1;
audio_play_sound(snPlayerHit, 0, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
