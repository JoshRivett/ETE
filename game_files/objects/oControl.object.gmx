<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Initial Variable Values
timer = 0;
timeUntilRestart = 3 * room_speed;
roomRestart = false;

//Initial Code
audio_stop_all();

if not(window_get_fullscreen()) {
    window_set_fullscreen(true);
    surface_resize(application_surface, 1920, 1080);
}

if room = stronghold {
    audio_play_sound(mLevel2, 0, true);
}
if room = boss2 {
    audio_play_sound(mBoss2, 0, true);
}
if room = theEnd {
    audio_play_sound(mPeacefulEnding, 0, true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check_pressed(vk_f11) {
    if window_get_fullscreen() = true {
        window_set_fullscreen(false);
    } else {
        window_set_fullscreen(true);
    }
}
if keyboard_check(vk_delete) {
    game_end();
}

//Exits the script if paused
if global.paused = true {
    exit;
}

if keyboard_check(ord('R')) {
    room_restart();
}

if roomRestart = true {
    timer += 1;
    
    if timer = timeUntilRestart {
        room_restart();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(oPlayer) { 
    draw_sprite(sHealth, oPlayer.hp, view_xview[0] + 428, view_yview[0]);
    //draw_text(x + 20, y + 20, string(oPlayer.hp))
} else {
    if not(room = theEnd) and not(room = mainMenu) {
        draw_sprite(sHealth, 0, view_xview[0] + 428, view_yview[0]);
        //draw_text(x + 20, y + 20, "0")
    }
}
if room = boss2 {
    if instance_exists(oBoss2) {
        draw_set_colour(c_black);
        draw_rectangle(view_xview[0] + 40, view_yview[0] + 260, view_xview[0] + 440, view_yview[0] + 250, false);
        draw_set_colour(c_green);
        draw_rectangle(view_xview[0] + 42, view_yview[0] + 258, view_xview[0] + (42 + (396 * oBoss2.hp / 50)), view_yview[0] + 252, false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
